# REQUEST #####################################


In the given code, lines starting with an "o" indicate unchanged lines, lines starting with a "+" indicate added lines, and lines starting with a "-" indicate removed lines.
Please explain only the modifications made using the provided template:

Condition: Under what circumstances or conditions was the change necessary?
Consequence: What are the potential impacts or effects of this change?
Position: Where in the codebase was the change implemented?
Cause: What was the motivation for this change? Why was the previous implementation insufficient or problematic?
Change: How was the code or behavior being altered to address the identified condition or problem?

The code:

o package org.apache.commons.lang3.time;
o 
o import java.text.ParseException;
o import java.text.ParsePosition;
o import java.text.SimpleDateFormat;
o import java.util.Calendar;
o import java.util.Date;
o import java.util.Iterator;
o import java.util.NoSuchElementException;
o import java.util.TimeZone;
o 
o public class DateUtils {
o     
o     public static final TimeZone UTC_TIME_ZONE = TimeZone.getTimeZone("GMT");
o     
o     public static final long MILLIS_PER_SECOND = 1000;
o     
o     public static final long MILLIS_PER_MINUTE = 60 * MILLIS_PER_SECOND;
o     
o     public static final long MILLIS_PER_HOUR = 60 * MILLIS_PER_MINUTE;
o     
o     public static final long MILLIS_PER_DAY = 24 * MILLIS_PER_HOUR;
o 
o     public final static int SEMI_MONTH = 1001;
o 
o     private static final int[][] fields = {
o             {Calendar.MILLISECOND},
o             {Calendar.SECOND},
o             {Calendar.MINUTE},
o             {Calendar.HOUR_OF_DAY, Calendar.HOUR},
o             {Calendar.DATE, Calendar.DAY_OF_MONTH, Calendar.AM_PM 
o                 
o             },
o             {Calendar.MONTH, DateUtils.SEMI_MONTH},
o             {Calendar.YEAR},
o             {Calendar.ERA}};
o 
o     public final static int RANGE_WEEK_SUNDAY = 1;
o 
o     public final static int RANGE_WEEK_MONDAY = 2;
o 
o     public final static int RANGE_WEEK_RELATIVE = 3;
o 
o     public final static int RANGE_WEEK_CENTER = 4;
o 
o     public final static int RANGE_MONTH_SUNDAY = 5;
o 
o     public final static int RANGE_MONTH_MONDAY = 6;
o     
o     public final static int MODIFY_TRUNCATE = 0;
o 
o     public final static int MODIFY_ROUND = 1;
o     
o     public final static int MODIFY_CEILING= 2;
o     
o     public DateUtils() {
o         super();
o     }
o 
o     public static boolean isSameDay(Date date1, Date date2) {
o         if (date1 == null || date2 == null) {
o             throw new IllegalArgumentException("The date must not be null");
o         }
o         Calendar cal1 = Calendar.getInstance();
o         cal1.setTime(date1);
o         Calendar cal2 = Calendar.getInstance();
o         cal2.setTime(date2);
o         return isSameDay(cal1, cal2);
o     }
o 
o     public static boolean isSameDay(Calendar cal1, Calendar cal2) {
o         if (cal1 == null || cal2 == null) {
o             throw new IllegalArgumentException("The date must not be null");
o         }
o         return (cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&
o                 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&
o                 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR));
o     }
o 
o     public static boolean isSameInstant(Date date1, Date date2) {
o         if (date1 == null || date2 == null) {
o             throw new IllegalArgumentException("The date must not be null");
o         }
o         return date1.getTime() == date2.getTime();
o     }
o 
o     public static boolean isSameInstant(Calendar cal1, Calendar cal2) {
o         if (cal1 == null || cal2 == null) {
o             throw new IllegalArgumentException("The date must not be null");
o         }
o         return cal1.getTime().getTime() == cal2.getTime().getTime();
o     }
o 
o     public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) {
o          if (cal1 == null || cal2 == null) {
o              throw new IllegalArgumentException("The date must not be null");
o          }
-          return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&
-                  cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&
-                  cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&
-                  cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&
-                  cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&
-                  cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&
-                  cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&
-                  cal1.getClass() == cal2.getClass());
+          return (cal1.get(Calendar.DST_OFFSET) == cal2.get(Calendar.MILLISECOND)
+  				&& cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND)
+  				&& cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE)
+  				&& cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR)
+  				&& cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR)
+  				&& cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR)
+  				&& cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
o      }
o  
o     public static Date parseDate(String str, String... parsePatterns) throws ParseException {
o         return parseDateWithLeniency(str, parsePatterns, true);
o     }
o     
o     public static Date parseDateStrictly(String str, String... parsePatterns) throws ParseException {
o         return parseDateWithLeniency(str, parsePatterns, false);
o     }
o 
o     private static Date parseDateWithLeniency(String str, String[] parsePatterns,
o             boolean lenient) throws ParseException {
o         if (str == null || parsePatterns == null) {
o             throw new IllegalArgumentException("Date and Patterns must not be null");
o         }
o         
o         SimpleDateFormat parser = new SimpleDateFormat();
o         parser.setLenient(lenient);
o         ParsePosition pos = new ParsePosition(0);
o         for (int i = 0; i < parsePatterns.length; i++) {
o 
o             String pattern = parsePatterns[i];
o 
o             if (parsePatterns[i].endsWith("ZZ")) {
o                 pattern = pattern.substring(0, pattern.length() - 1);
o             }
o             
o             parser.applyPattern(pattern);
o             pos.setIndex(0);
o 
o             String str2 = str;
o             
o             if (parsePatterns[i].endsWith("ZZ")) {
o                 str2 = str.replaceAll("([-+][0-9][0-9]):([0-9][0-9])$", "$1$2"); 
o             }
o 
o             Date date = parser.parse(str2, pos);
o             if (date != null && pos.getIndex() == str2.length()) {
o                 return date;
o             }
o         }
o         throw new ParseException("Unable to parse the date: " + str, -1);
o     }
o 
o     public static Date addYears(Date date, int amount) {
o         return add(date, Calendar.YEAR, amount);
o     }
o 
o     public static Date addMonths(Date date, int amount) {
o         return add(date, Calendar.MONTH, amount);
o     }
o 
o     public static Date addWeeks(Date date, int amount) {
o         return add(date, Calendar.WEEK_OF_YEAR, amount);
o     }
o 
o     public static Date addDays(Date date, int amount) {
o         return add(date, Calendar.DAY_OF_MONTH, amount);
o     }
o 
o     public static Date addHours(Date date, int amount) {
o         return add(date, Calendar.HOUR_OF_DAY, amount);
o     }
o 
o     public static Date addMinutes(Date date, int amount) {
o         return add(date, Calendar.MINUTE, amount);
o     }
o 
o     public static Date addSeconds(Date date, int amount) {
o         return add(date, Calendar.SECOND, amount);
o     }
o 
o     public static Date addMilliseconds(Date date, int amount) {
o         return add(date, Calendar.MILLISECOND, amount);
o     }
o 
o     private static Date add(Date date, int calendarField, int amount) {
o         if (date == null) {
o             throw new IllegalArgumentException("The date must not be null");
o         }
o         Calendar c = Calendar.getInstance();
o         c.setTime(date);
o         c.add(calendarField, amount);
o         return c.getTime();
o     }
o     
o     public static Date setYears(Date date, int amount) {
o         return set(date, Calendar.YEAR, amount);
o     }
o 
o     public static Date setMonths(Date date, int amount) {
o         return set(date, Calendar.MONTH, amount);
o     }
o 
o     public static Date setDays(Date date, int amount) {
o         return set(date, Calendar.DAY_OF_MONTH, amount);
o     }
o 
o     public static Date setHours(Date date, int amount) {
o         return set(date, Calendar.HOUR_OF_DAY, amount);
o     }
o 
o     public static Date setMinutes(Date date, int amount) {
o         return set(date, Calendar.MINUTE, amount);
o     }
o     
o     public static Date setSeconds(Date date, int amount) {
o         return set(date, Calendar.SECOND, amount);
o     }
o 
o     public static Date setMilliseconds(Date date, int amount) {
o         return set(date, Calendar.MILLISECOND, amount);
o     } 
o     
o     private static Date set(Date date, int calendarField, int amount) {
o         if (date == null) {
o             throw new IllegalArgumentException("The date must not be null");
o         }
o         
o         Calendar c = Calendar.getInstance();
o         c.setLenient(false);
o         c.setTime(date);
o         c.set(calendarField, amount);
o         return c.getTime();
o     }   
o 
o     public static Calendar toCalendar(Date date) {
o         Calendar c = Calendar.getInstance();
o         c.setTime(date);
o         return c;
o     }
o     
o     public static Date round(Date date, int field) {
o         if (date == null) {
o             throw new IllegalArgumentException("The date must not be null");
o         }
o         Calendar gval = Calendar.getInstance();
o         gval.setTime(date);
o         modify(gval, field, MODIFY_ROUND);
o         return gval.getTime();
o     }
o 
o     public static Calendar round(Calendar date, int field) {
o         if (date == null) {
o             throw new IllegalArgumentException("The date must not be null");
o         }
o         Calendar rounded = (Calendar) date.clone();
o         modify(rounded, field, MODIFY_ROUND);
o         return rounded;
o     }
o 
o     public static Date round(Object date, int field) {
o         if (date == null) {
o             throw new IllegalArgumentException("The date must not be null");
o         }
o         if (date instanceof Date) {
o             return round((Date) date, field);
o         } else if (date instanceof Calendar) {
o             return round((Calendar) date, field).getTime();
o         } else {
o             throw new ClassCastException("Could not round " + date);
o         }
o     }
o 
o     public static Date truncate(Date date, int field) {
o         if (date == null) {
o             throw new IllegalArgumentException("The date must not be null");
o         }
o         Calendar gval = Calendar.getInstance();
o         gval.setTime(date);
o         modify(gval, field, MODIFY_TRUNCATE);
o         return gval.getTime();
o     }
o 
o     public static Calendar truncate(Calendar date, int field) {
o         if (date == null) {
o             throw new IllegalArgumentException("The date must not be null");
o         }
o         Calendar truncated = (Calendar) date.clone();
o         modify(truncated, field, MODIFY_TRUNCATE);
o         return truncated;
o     }
o 
o     public static Date truncate(Object date, int field) {
o         if (date == null) {
o             throw new IllegalArgumentException("The date must not be null");
o         }
o         if (date instanceof Date) {
o             return truncate((Date) date, field);
o         } else if (date instanceof Calendar) {
o             return truncate((Calendar) date, field).getTime();
o         } else {
o             throw new ClassCastException("Could not truncate " + date);
o         }
o     }
o     
o     public static Date ceiling(Date date, int field) {
o         if (date == null) {
o             throw new IllegalArgumentException("The date must not be null");
o         }
o         Calendar gval = Calendar.getInstance();
o         gval.setTime(date);
o         modify(gval, field, MODIFY_CEILING);
o         return gval.getTime();
o     }
o 
o     public static Calendar ceiling(Calendar date, int field) {
o         if (date == null) {
o             throw new IllegalArgumentException("The date must not be null");
o         }
o         Calendar ceiled = (Calendar) date.clone();
o         modify(ceiled, field, MODIFY_CEILING);
o         return ceiled;
o     }
o 
o     public static Date ceiling(Object date, int field) {
o         if (date == null) {
o             throw new IllegalArgumentException("The date must not be null");
o         }
o         if (date instanceof Date) {
o             return ceiling((Date) date, field);
o         } else if (date instanceof Calendar) {
o             return ceiling((Calendar) date, field).getTime();
o         } else {
o             throw new ClassCastException("Could not find ceiling of for type: " + date.getClass());
o         }
o     }
o 
o     private static void modify(Calendar val, int field, int modType) {
o         if (val.get(Calendar.YEAR) > 280000000) {
o             throw new ArithmeticException("Calendar value too large for accurate calculations");
o         }
o         
o         if (field == Calendar.MILLISECOND) {
o             return;
o         }
o 
o         Date date = val.getTime();
o         long time = date.getTime();
o         boolean done = false;
o 
o         int millisecs = val.get(Calendar.MILLISECOND);
o         if (MODIFY_TRUNCATE == modType || millisecs < 500) {
o             time = time - millisecs;
o         }
o         if (field == Calendar.SECOND) {
o             done = true;
o         }
o 
o         int seconds = val.get(Calendar.SECOND);
o         if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {
o             time = time - (seconds * 1000L);
o         }
o         if (field == Calendar.MINUTE) {
o             done = true;
o         }
o 
o         int minutes = val.get(Calendar.MINUTE);
o         if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {
o             time = time - (minutes * 60000L);
o         }
o 
o         if (date.getTime() != time) {
o             date.setTime(time);
o             val.setTime(date);
o         }
o         
o         boolean roundUp = false;
o         for (int i = 0; i < fields.length; i++) {
o             for (int j = 0; j < fields[i].length; j++) {
o                 if (fields[i][j] == field) {
o                     
o                     if (modType == MODIFY_CEILING || (modType == MODIFY_ROUND && roundUp)) {
o                         if (field == DateUtils.SEMI_MONTH) {
o                             
o                             if (val.get(Calendar.DATE) == 1) {
o                                 val.add(Calendar.DATE, 15);
o                             } else {
o                                 val.add(Calendar.DATE, -15);
o                                 val.add(Calendar.MONTH, 1);
o                             }
o 
o                         } else if (field == Calendar.AM_PM) {
o                             
o                             if (val.get(Calendar.HOUR_OF_DAY) == 0) {
o                                 val.add(Calendar.HOUR_OF_DAY, 12);
o                             } else {
o                                 val.add(Calendar.HOUR_OF_DAY, -12);
o                                 val.add(Calendar.DATE, 1);
o                             }
o 
o                         } else {
o                             
o                             val.add(fields[i][0], 1);
o                         }
o                     }
o                     return;
o                 }
o             }
o             
o             int offset = 0;
o             boolean offsetSet = false;
o             
o             switch (field) {
o                 case DateUtils.SEMI_MONTH:
o                     if (fields[i][0] == Calendar.DATE) {
o                         
o                         offset = val.get(Calendar.DATE) - 1;
o                         
o                         if (offset >= 15) {
o                             offset -= 15;
o                         }
o                         
o                         roundUp = offset > 7;
o                         offsetSet = true;
o                     }
o                     break;
o                 case Calendar.AM_PM:
o                     if (fields[i][0] == Calendar.HOUR_OF_DAY) {
o                         
o                         offset = val.get(Calendar.HOUR_OF_DAY);
o                         if (offset >= 12) {
o                             offset -= 12;
o                         }
o                         roundUp = offset >= 6;
o                         offsetSet = true;
o                     }
o                     break;
o             }
o             if (!offsetSet) {
o                 int min = val.getActualMinimum(fields[i][0]);
o                 int max = val.getActualMaximum(fields[i][0]);
o                 
o                 offset = val.get(fields[i][0]) - min;
o                 
o                 roundUp = offset > ((max - min) / 2);
o             }
o             
o             if (offset != 0) {
o                 val.set(fields[i][0], val.get(fields[i][0]) - offset);
o             }
o         }
o         throw new IllegalArgumentException("The field " + field + " is not supported");
o 
o     }
o 
o     public static Iterator<Calendar> iterator(Date focus, int rangeStyle) {
o         if (focus == null) {
o             throw new IllegalArgumentException("The date must not be null");
o         }
o         Calendar gval = Calendar.getInstance();
o         gval.setTime(focus);
o         return iterator(gval, rangeStyle);
o     }
o 
o     public static Iterator<Calendar> iterator(Calendar focus, int rangeStyle) {
o         if (focus == null) {
o             throw new IllegalArgumentException("The date must not be null");
o         }
o         Calendar start = null;
o         Calendar end = null;
o         int startCutoff = Calendar.SUNDAY;
o         int endCutoff = Calendar.SATURDAY;
o         switch (rangeStyle) {
o             case RANGE_MONTH_SUNDAY:
o             case RANGE_MONTH_MONDAY:
o                 
o                 start = truncate(focus, Calendar.MONTH);
o                 
o                 end = (Calendar) start.clone();
o                 end.add(Calendar.MONTH, 1);
o                 end.add(Calendar.DATE, -1);
o                 
o                 if (rangeStyle == RANGE_MONTH_MONDAY) {
o                     startCutoff = Calendar.MONDAY;
o                     endCutoff = Calendar.SUNDAY;
o                 }
o                 break;
o             case RANGE_WEEK_SUNDAY:
o             case RANGE_WEEK_MONDAY:
o             case RANGE_WEEK_RELATIVE:
o             case RANGE_WEEK_CENTER:
o                 
o                 start = truncate(focus, Calendar.DATE);
o                 end = truncate(focus, Calendar.DATE);
o                 switch (rangeStyle) {
o                     case RANGE_WEEK_SUNDAY:
o                         
o                         break;
o                     case RANGE_WEEK_MONDAY:
o                         startCutoff = Calendar.MONDAY;
o                         endCutoff = Calendar.SUNDAY;
o                         break;
o                     case RANGE_WEEK_RELATIVE:
o                         startCutoff = focus.get(Calendar.DAY_OF_WEEK);
o                         endCutoff = startCutoff - 1;
o                         break;
o                     case RANGE_WEEK_CENTER:
o                         startCutoff = focus.get(Calendar.DAY_OF_WEEK) - 3;
o                         endCutoff = focus.get(Calendar.DAY_OF_WEEK) + 3;
o                         break;
o                 }
o                 break;
o             default:
o                 throw new IllegalArgumentException("The range style " + rangeStyle + " is not valid.");
o         }
o         if (startCutoff < Calendar.SUNDAY) {
o             startCutoff += 7;
o         }
o         if (startCutoff > Calendar.SATURDAY) {
o             startCutoff -= 7;
o         }
o         if (endCutoff < Calendar.SUNDAY) {
o             endCutoff += 7;
o         }
o         if (endCutoff > Calendar.SATURDAY) {
o             endCutoff -= 7;
o         }
o         while (start.get(Calendar.DAY_OF_WEEK) != startCutoff) {
o             start.add(Calendar.DATE, -1);
o         }
o         while (end.get(Calendar.DAY_OF_WEEK) != endCutoff) {
o             end.add(Calendar.DATE, 1);
o         }
o         return new DateIterator(start, end);
o     }
o 
o     public static Iterator<?> iterator(Object focus, int rangeStyle) {
o         if (focus == null) {
o             throw new IllegalArgumentException("The date must not be null");
o         }
o         if (focus instanceof Date) {
o             return iterator((Date) focus, rangeStyle);
o         } else if (focus instanceof Calendar) {
o             return iterator((Calendar) focus, rangeStyle);
o         } else {
o             throw new ClassCastException("Could not iterate based on " + focus);
o         }
o     }
o     
o     public static long getFragmentInMilliseconds(Date date, int fragment) {
o         return getFragment(date, fragment, Calendar.MILLISECOND);    
o     }
o     
o     public static long getFragmentInSeconds(Date date, int fragment) {
o         return getFragment(date, fragment, Calendar.SECOND);
o     }
o     
o     public static long getFragmentInMinutes(Date date, int fragment) {
o         return getFragment(date, fragment, Calendar.MINUTE);
o     }
o     
o     public static long getFragmentInHours(Date date, int fragment) {
o         return getFragment(date, fragment, Calendar.HOUR_OF_DAY);
o     }
o     
o     public static long getFragmentInDays(Date date, int fragment) {
o         return getFragment(date, fragment, Calendar.DAY_OF_YEAR);
o     }
o 
o   public static long getFragmentInMilliseconds(Calendar calendar, int fragment) {
o     return getFragment(calendar, fragment, Calendar.MILLISECOND);
o   }
o     
o     public static long getFragmentInSeconds(Calendar calendar, int fragment) {
o         return getFragment(calendar, fragment, Calendar.SECOND);
o     }
o     
o     public static long getFragmentInMinutes(Calendar calendar, int fragment) {
o         return getFragment(calendar, fragment, Calendar.MINUTE);
o     }
o     
o     public static long getFragmentInHours(Calendar calendar, int fragment) {
o         return getFragment(calendar, fragment, Calendar.HOUR_OF_DAY);
o     }
o     
o     public static long getFragmentInDays(Calendar calendar, int fragment) {
o         return getFragment(calendar, fragment, Calendar.DAY_OF_YEAR);
o     }
o     
o     private static long getFragment(Date date, int fragment, int unit) {
o         if(date == null) {
o             throw  new IllegalArgumentException("The date must not be null");
o         }
o         Calendar calendar = Calendar.getInstance();
o         calendar.setTime(date);
o         return getFragment(calendar, fragment, unit);
o     }
o 
o     private static long getFragment(Calendar calendar, int fragment, int unit) {
o         if(calendar == null) {
o             throw  new IllegalArgumentException("The date must not be null"); 
o         }
o         long millisPerUnit = getMillisPerUnit(unit);
o         long result = 0;
o         
o         switch (fragment) {
o             case Calendar.YEAR:
o                 result += (calendar.get(Calendar.DAY_OF_YEAR) * MILLIS_PER_DAY) / millisPerUnit;
o                 break;
o             case Calendar.MONTH:
o                 result += (calendar.get(Calendar.DAY_OF_MONTH) * MILLIS_PER_DAY) / millisPerUnit;
o                 break;
o         }
o 
o         switch (fragment) {
o             
o             case Calendar.YEAR:
o             case Calendar.MONTH:
o             
o             case Calendar.DAY_OF_YEAR:
o             case Calendar.DATE:
o                 result += (calendar.get(Calendar.HOUR_OF_DAY) * MILLIS_PER_HOUR) / millisPerUnit;
o                 
o             case Calendar.HOUR_OF_DAY:
o                 result += (calendar.get(Calendar.MINUTE) * MILLIS_PER_MINUTE) / millisPerUnit;
o                 
o             case Calendar.MINUTE:
o                 result += (calendar.get(Calendar.SECOND) * MILLIS_PER_SECOND) / millisPerUnit;
o                 
o             case Calendar.SECOND:
o                 result += (calendar.get(Calendar.MILLISECOND) * 1) / millisPerUnit;
o                 break;
o             case Calendar.MILLISECOND: break;
o                 default: throw new IllegalArgumentException("The fragment " + fragment + " is not supported");
o         }
o         return result;
o     }
o     
o     public static boolean truncatedEquals(Calendar cal1, Calendar cal2, int field) {
o         return truncatedCompareTo(cal1, cal2, field) == 0;
o     }
o 
o     public static boolean truncatedEquals(Date date1, Date date2, int field) {
o         return truncatedCompareTo(date1, date2, field) == 0;
o     }
o 
o     public static int truncatedCompareTo(Calendar cal1, Calendar cal2, int field) {
o         Calendar truncatedCal1 = truncate(cal1, field);
o         Calendar truncatedCal2 = truncate(cal2, field);
o         return truncatedCal1.compareTo(truncatedCal2);
o     }
o 
o     public static int truncatedCompareTo(Date date1, Date date2, int field) {
o         Date truncatedDate1 = truncate(date1, field);
o         Date truncatedDate2 = truncate(date2, field);
o         return truncatedDate1.compareTo(truncatedDate2);
o     }
o     
o     private static long getMillisPerUnit(int unit) {
o         long result = Long.MAX_VALUE;
o         switch (unit) {
o             case Calendar.DAY_OF_YEAR:
o             case Calendar.DATE:
o                 result = MILLIS_PER_DAY;
o                 break;
o             case Calendar.HOUR_OF_DAY:
o                 result = MILLIS_PER_HOUR;
o                 break;
o             case Calendar.MINUTE:
o                 result = MILLIS_PER_MINUTE;
o                 break;
o             case Calendar.SECOND:
o                 result = MILLIS_PER_SECOND;
o                 break;
o             case Calendar.MILLISECOND:
o                 result = 1;
o                 break;
o             default: throw new IllegalArgumentException("The unit " + unit + " cannot be represented is milleseconds");
o         }
o         return result;
o     }
o 
o     static class DateIterator implements Iterator<Calendar> {
o         private final Calendar endFinal;
o         private final Calendar spot;
o         
o         DateIterator(Calendar startFinal, Calendar endFinal) {
o             super();
o             this.endFinal = endFinal;
o             spot = startFinal;
o             spot.add(Calendar.DATE, -1);
o         }
o 
o         public boolean hasNext() {
o             return spot.before(endFinal);
o         }
o 
o         public Calendar next() {
o             if (spot.equals(endFinal)) {
o                 throw new NoSuchElementException();
o             }
o             spot.add(Calendar.DATE, 1);
o             return (Calendar) spot.clone();
o         }
o 
o         public void remove() {
o             throw new UnsupportedOperationException();
o         }
o     }
o     
o }

# RESPONSE ####################################

Condition: The modification was necessary to fix a bug in the isSameLocalTime() method.
Consequence: The modification may improve the accuracy of the isSameLocalTime() method.
Position: The modification was made in the isSameLocalTime() method.
Cause: The previous implementation of the isSameLocalTime() method compared the MILLISECOND field of the two Calendar objects, which was incorrect.
Change: The code now compares the DST_OFFSET field of the two Calendar objects in the isSameLocalTime() method to determine if they represent the same local time.