# REQUEST #####################################


In the given code, lines starting with an "o" indicate unchanged lines, lines starting with a "+" indicate added lines, and lines starting with a "-" indicate removed lines.
Please explain only the modifications made using the provided template:

Condition: Under what circumstances or conditions was the change necessary?
Consequence: What are the potential impacts or effects of this change?
Position: Where in the codebase was the change implemented?
Cause: What was the motivation for this change? Why was the previous implementation insufficient or problematic?
Change: How was the code or behavior being altered to address the identified condition or problem?

The code:

o package org.apache.commons.math.analysis.solvers;
o 
o import org.apache.commons.math.analysis.UnivariateFunction;
o import org.apache.commons.math.exception.MathInternalError;
o import org.apache.commons.math.exception.NoBracketingException;
o import org.apache.commons.math.exception.NumberIsTooSmallException;
o import org.apache.commons.math.util.FastMath;
o import org.apache.commons.math.util.Precision;
o 
o public class BracketingNthOrderBrentSolver
o     extends AbstractUnivariateRealSolver
o     implements BracketedUnivariateRealSolver<UnivariateFunction> {
o 
o     private static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;
o 
o     private static final int DEFAULT_MAXIMAL_ORDER = 5;
o 
o     private static final int MAXIMAL_AGING = 2;
o 
o     private static final double REDUCTION_FACTOR = 1.0 / 16.0;
o 
o     private final int maximalOrder;
o 
o     private AllowedSolution allowed;
o 
o     public BracketingNthOrderBrentSolver() {
o         this(DEFAULT_ABSOLUTE_ACCURACY, DEFAULT_MAXIMAL_ORDER);
o     }
o 
o     public BracketingNthOrderBrentSolver(final double absoluteAccuracy,
o                                          final int maximalOrder)
o         throws NumberIsTooSmallException {
o         super(absoluteAccuracy);
o         if (maximalOrder < 2) {
o             throw new NumberIsTooSmallException(maximalOrder, 2, true);
o         }
o         this.maximalOrder = maximalOrder;
o         this.allowed = AllowedSolution.ANY_SIDE;
o     }
o 
o     public BracketingNthOrderBrentSolver(final double relativeAccuracy,
o                                          final double absoluteAccuracy,
o                                          final int maximalOrder)
o         throws NumberIsTooSmallException {
o         super(relativeAccuracy, absoluteAccuracy);
o         if (maximalOrder < 2) {
o             throw new NumberIsTooSmallException(maximalOrder, 2, true);
o         }
o         this.maximalOrder = maximalOrder;
o         this.allowed = AllowedSolution.ANY_SIDE;
o     }
o 
o     public BracketingNthOrderBrentSolver(final double relativeAccuracy,
o                                          final double absoluteAccuracy,
o                                          final double functionValueAccuracy,
o                                          final int maximalOrder)
o         throws NumberIsTooSmallException {
o         super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);
o         if (maximalOrder < 2) {
o             throw new NumberIsTooSmallException(maximalOrder, 2, true);
o         }
o         this.maximalOrder = maximalOrder;
o         this.allowed = AllowedSolution.ANY_SIDE;
o     }
o 
o     public int getMaximalOrder() {
o         return maximalOrder;
o     }
o 
o     @Override
o     protected double doSolve() {
o 
o         final double[] x = new double[maximalOrder + 1];
o         final double[] y = new double[maximalOrder + 1];
o         x[0] = getMin();
o         x[1] = getStartValue();
o         x[2] = getMax();
o         verifySequence(x[0], x[1], x[2]);
o 
o         y[1] = computeObjectiveValue(x[1]);
o         if (Precision.equals(y[1], 0.0, 1)) {
o             
o             return x[1];
o         }
o 
o         y[0] = computeObjectiveValue(x[0]);
o         if (Precision.equals(y[0], 0.0, 1)) {
o             
o             return x[0];
o         }
o 
o         int nbPoints;
o         int signChangeIndex;
o         if (y[0] * y[1] < 0) {
o 
o             nbPoints        = 2;
o             signChangeIndex = 1;
o 
o         } else {
o 
o             y[2] = computeObjectiveValue(x[2]);
o             if (Precision.equals(y[2], 0.0, 1)) {
o                 
o                 return x[2];
o             }
o 
o             if (y[1] * y[2] < 0) {
o                 
o                 nbPoints        = 3;
o                 signChangeIndex = 2;
o             } else {
o                 throw new NoBracketingException(x[0], x[2], y[0], y[2]);
o             }
o 
o         }
o 
o         final double[] tmpX = new double[x.length];
o 
o         double xA    = x[signChangeIndex - 1];
o         double yA    = y[signChangeIndex - 1];
o         double absYA = FastMath.abs(yA);
o         int agingA   = 0;
o         double xB    = x[signChangeIndex];
o         double yB    = y[signChangeIndex];
o         double absYB = FastMath.abs(yB);
o         int agingB   = 0;
o 
o         while (true) {
o 
o             final double xTol = getAbsoluteAccuracy() +
o                                 getRelativeAccuracy() * FastMath.max(FastMath.abs(xA), FastMath.abs(xB));
o             if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy())) {
o                 switch (allowed) {
o                 case ANY_SIDE :
o                     return absYA < absYB ? xA : xB;
o                 case LEFT_SIDE :
o                     return xA;
o                 case RIGHT_SIDE :
o                     return xB;
o                 case BELOW_SIDE :
o                     return (yA <= 0) ? xA : xB;
o                 case ABOVE_SIDE :
o                     return (yA <  0) ? xB : xA;
o                 default :
o                     
o                     throw new MathInternalError(null);
o                 }
o             }
o 
o              double targetY;
o              if (agingA >= MAXIMAL_AGING) {
o                  
+                  final int p = agingA - MAXIMAL_AGING;
+                  final double weightA = (1 << p) - 1;
+                  final double weightB = p + 1;
+                  targetY = (weightA * yA - weightB * REDUCTION_FACTOR * yB) / (weightA + weightB);
-                  targetY = -REDUCTION_FACTOR * yB;
o              } else if (agingB >= MAXIMAL_AGING) {
o                  
+                  final int p = agingB - MAXIMAL_AGING;
+                  final double weightA = p + 1;
+                  final double weightB = (1 << p) - 1;
+                  targetY = (weightB * yB - weightA * REDUCTION_FACTOR * yA) / (weightA + weightB);
-                  targetY = -REDUCTION_FACTOR * yA;
o              } else {
o                  
o                  targetY = 0;
o 
o             do {
o 
o                 System.arraycopy(x, start, tmpX, start, end - start);
o                 nextX = guessX(targetY, tmpX, y, start, end);
o 
o                 if (!((nextX > xA) && (nextX < xB))) {
o                     
o                     if (signChangeIndex - start >= end - signChangeIndex) {
o                         
o                         ++start;
o                     } else {
o                         
o                         --end;
o                     }
o 
o                     nextX = Double.NaN;
o 
o                 }
o 
o             } while (Double.isNaN(nextX) && (end - start > 1));
o 
o             if (Double.isNaN(nextX)) {
o                 
o                 nextX = xA + 0.5 * (xB - xA);
o                 start = signChangeIndex - 1;
o                 end   = signChangeIndex;
o             }
o 
o             final double nextY = computeObjectiveValue(nextX);
o             if (Precision.equals(nextY, 0.0, 1)) {
o                 
o                 return nextX;
o             }
o 
o             if ((nbPoints > 2) && (end - start != nbPoints)) {
o 
o                 nbPoints = end - start;
o                 System.arraycopy(x, start, x, 0, nbPoints);
o                 System.arraycopy(y, start, y, 0, nbPoints);
o                 signChangeIndex -= start;
o 
o             } else  if (nbPoints == x.length) {
o 
o                 nbPoints--;
o 
o                 if (signChangeIndex >= (x.length + 1) / 2) {
o                     
o                     System.arraycopy(x, 1, x, 0, nbPoints);
o                     System.arraycopy(y, 1, y, 0, nbPoints);
o                     --signChangeIndex;
o                 }
o 
o             }
o 
o             System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);
o             x[signChangeIndex] = nextX;
o             System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);
o             y[signChangeIndex] = nextY;
o             ++nbPoints;
o 
o             if (nextY * yA <= 0) {
o                 
o                 xB = nextX;
o                 yB = nextY;
o                 absYB = FastMath.abs(yB);
o                 ++agingA;
o                 agingB = 0;
o             } else {
o                 
o                 xA = nextX;
o                 yA = nextY;
o                 absYA = FastMath.abs(yA);
o                 agingA = 0;
o                 ++agingB;
o 
o                 signChangeIndex++;
o 
o             }
o 
o         }
o 
o     }
o 
o     private double guessX(final double targetY, final double[] x, final double[] y,
o                           final int start, final int end) {
o 
o         for (int i = start; i < end - 1; ++i) {
o             final int delta = i + 1 - start;
o             for (int j = end - 1; j > i; --j) {
o                 x[j] = (x[j] - x[j-1]) / (y[j] - y[j - delta]);
o             }
o         }
o 
o         double x0 = 0;
o         for (int j = end - 1; j >= start; --j) {
o             x0 = x[j] + x0 * (targetY - y[j]);
o         }
o 
o         return x0;
o 
o     }
o 
o     public double solve(int maxEval, UnivariateFunction f, double min,
o                         double max, AllowedSolution allowedSolution) {
o         this.allowed = allowedSolution;
o         return super.solve(maxEval, f, min, max);
o     }
o 
o     public double solve(int maxEval, UnivariateFunction f, double min,
o                         double max, double startValue,
o                         AllowedSolution allowedSolution) {
o         this.allowed = allowedSolution;
o         return super.solve(maxEval, f, min, max, startValue);
o     }
o 
o }

# RESPONSE ####################################

Condition: The change was necessary to improve the accuracy and efficiency of the BracketingNthOrderBrentSolver algorithm.

Consequence: The change could potentially improve the convergence rate and accuracy of the solver, leading to more accurate solutions and faster computation times.

Position: The change was implemented in the doSolve() method of the BracketingNthOrderBrentSolver class.

Cause: The previous implementation of the solver did not account for aging of the solution points, which could lead to slower convergence and accuracy issues. The change was motivated by the need to address these issues and improve the solver's performance.

Change: The code was modified to introduce a new algorithm for updating the solution points based on their aging. This algorithm adjusts the weight of the solution points based on their age and computes a new target function value for the next iteration. This allows the solver to adaptively adjust the solution points and improve the convergence rate. Additionally, the code was modified to use a new formula for computing the target function value when one of the solution points has aged significantly. This formula takes into account the relative weights of the solution points and further improves the accuracy of the solver.