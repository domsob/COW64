# REQUEST #####################################


In the given code, lines starting with an "o" indicate unchanged lines, lines starting with a "+" indicate added lines, and lines starting with a "-" indicate removed lines.
Please explain only the modifications made using the provided template:

Condition: Under what circumstances or conditions was the change necessary?
Consequence: What are the potential impacts or effects of this change?
Position: Where in the codebase was the change implemented?
Cause: What was the motivation for this change? Why was the previous implementation insufficient or problematic?
Change: How was the code or behavior being altered to address the identified condition or problem?

The code:

o package org.apache.commons.math.complex;
o 
o import java.io.Serializable;
o import java.util.ArrayList;
o import java.util.List;
o 
o import org.apache.commons.math.FieldElement;
o import org.apache.commons.math.MathRuntimeException;
o import org.apache.commons.math.exception.NullArgumentException;
o import org.apache.commons.math.exception.util.LocalizedFormats;
o import org.apache.commons.math.util.MathUtils;
o import org.apache.commons.math.util.FastMath;
o 
o public class Complex implements FieldElement<Complex>, Serializable  {
o 
o     public static final Complex I = new Complex(0.0, 1.0);
o 
o     public static final Complex NaN = new Complex(Double.NaN, Double.NaN);
o     
o     public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
o 
o     public static final Complex ONE = new Complex(1.0, 0.0);
o 
o     public static final Complex ZERO = new Complex(0.0, 0.0);
o 
o     private static final long serialVersionUID = -6195664516687396620L;
o 
o     private final double imaginary;
o 
o     private final double real;
o 
o     private final transient boolean isNaN;
o 
o     private final transient boolean isInfinite;
o 
o     public Complex(double real, double imaginary) {
o         super();
o         this.real = real;
o         this.imaginary = imaginary;
o 
o         isNaN = Double.isNaN(real) || Double.isNaN(imaginary);
o         isInfinite = !isNaN &&
o         (Double.isInfinite(real) || Double.isInfinite(imaginary));
o     }
o 
o     public double abs() {
o         if (isNaN) {
o             return Double.NaN;
o         }
o 
o         if (isInfinite()) {
o             return Double.POSITIVE_INFINITY;
o         }
o 
o         if (FastMath.abs(real) < FastMath.abs(imaginary)) {
o             if (imaginary == 0.0) {
o                 return FastMath.abs(real);
o             }
o             double q = real / imaginary;
o             return FastMath.abs(imaginary) * FastMath.sqrt(1 + q * q);
o         } else {
o             if (real == 0.0) {
o                 return FastMath.abs(imaginary);
o             }
o             double q = imaginary / real;
o             return FastMath.abs(real) * FastMath.sqrt(1 + q * q);
o         }
o     }
o 
o      public Complex add(Complex rhs)
o          throws NullArgumentException {
o          MathUtils.checkNotNull(rhs);
+          if (isNaN || rhs.isNaN) {
+  			return NaN;
+  		}
o          return createComplex(real + rhs.getReal(),
o              imaginary + rhs.getImaginary());
o      }
o 
o     public Complex conjugate() {
o         if (isNaN) {
o             return NaN;
o         }
o         return createComplex(real, -imaginary);
o     }
o 
o     public Complex divide(Complex rhs)
o         throws NullArgumentException {
o         MathUtils.checkNotNull(rhs);
o         if (isNaN || rhs.isNaN) {
o             return NaN;
o         }
o 
o         double c = rhs.getReal();
o         double d = rhs.getImaginary();
o         if (c == 0.0 && d == 0.0) {
o             return NaN;
o         }
o 
o         if (rhs.isInfinite() && !isInfinite()) {
o             return ZERO;
o         }
o 
o         if (FastMath.abs(c) < FastMath.abs(d)) {
o             double q = c / d;
o             double denominator = c * q + d;
o             return createComplex((real * q + imaginary) / denominator,
o                 (imaginary * q - real) / denominator);
o         } else {
o             double q = d / c;
o             double denominator = d * q + c;
o             return createComplex((imaginary * q + real) / denominator,
o                 (imaginary - real * q) / denominator);
o         }
o     }
o 
o     @Override
o     public boolean equals(Object other) {
o         if (this == other) {
o             return true;
o         }
o         if (other instanceof Complex){
o             Complex rhs = (Complex)other;
o             if (rhs.isNaN) {
o                 return isNaN;
o             } else {
o                 return (real == rhs.real) && (imaginary == rhs.imaginary);
o             }
o         }
o         return false;
o     }
o 
o     @Override
o     public int hashCode() {
o         if (isNaN) {
o             return 7;
o         }
o         return 37 * (17 * MathUtils.hash(imaginary) +
o             MathUtils.hash(real));
o     }
o 
o     public double getImaginary() {
o         return imaginary;
o     }
o 
o     public double getReal() {
o         return real;
o     }
o 
o     public boolean isNaN() {
o         return isNaN;
o     }
o 
o     public boolean isInfinite() {
o         return isInfinite;
o     }
o 
o     public Complex multiply(Complex rhs)
o         throws NullArgumentException {
o         MathUtils.checkNotNull(rhs);
o         if (isNaN || rhs.isNaN) {
o             return NaN;
o         }
o         if (Double.isInfinite(real) || Double.isInfinite(imaginary) ||
o             Double.isInfinite(rhs.real)|| Double.isInfinite(rhs.imaginary)) {
o             
o             return INF;
o         }
o         return createComplex(real * rhs.real - imaginary * rhs.imaginary,
o                 real * rhs.imaginary + imaginary * rhs.real);
o     }
o 
o     public Complex multiply(double rhs) {
o         if (isNaN || Double.isNaN(rhs)) {
o             return NaN;
o         }
o         if (Double.isInfinite(real) || Double.isInfinite(imaginary) ||
o             Double.isInfinite(rhs)) {
o             
o             return INF;
o         }
o         return createComplex(real * rhs, imaginary * rhs);
o     }
o 
o     public Complex negate() {
o         if (isNaN) {
o             return NaN;
o         }
o 
o         return createComplex(-real, -imaginary);
o     }
o 
o     public Complex subtract(Complex rhs)
o         throws NullArgumentException {
o         MathUtils.checkNotNull(rhs);
o         if (isNaN || rhs.isNaN) {
o             return NaN;
o         }
o 
o         return createComplex(real - rhs.getReal(),
o             imaginary - rhs.getImaginary());
o     }
o 
o     public Complex acos() {
o         if (isNaN) {
o             return NaN;
o         }
o 
o         return this.add(this.sqrt1z().multiply(Complex.I)).log()
o               .multiply(Complex.I.negate());
o     }
o 
o     public Complex asin() {
o         if (isNaN) {
o             return NaN;
o         }
o 
o         return sqrt1z().add(this.multiply(Complex.I)).log()
o               .multiply(Complex.I.negate());
o     }
o 
o     public Complex atan() {
o         if (isNaN) {
o             return NaN;
o         }
o 
o         return this.add(Complex.I).divide(Complex.I.subtract(this)).log()
o             .multiply(Complex.I.divide(createComplex(2.0, 0.0)));
o     }
o 
o     public Complex cos() {
o         if (isNaN) {
o             return NaN;
o         }
o 
o         return createComplex(FastMath.cos(real) * MathUtils.cosh(imaginary),
o             -FastMath.sin(real) * MathUtils.sinh(imaginary));
o     }
o 
o     public Complex cosh() {
o         if (isNaN) {
o             return NaN;
o         }
o 
o         return createComplex(MathUtils.cosh(real) * FastMath.cos(imaginary),
o             MathUtils.sinh(real) * FastMath.sin(imaginary));
o     }
o 
o     public Complex exp() {
o         if (isNaN) {
o             return NaN;
o         }
o 
o         double expReal = FastMath.exp(real);
o         return createComplex(expReal *  FastMath.cos(imaginary), expReal * FastMath.sin(imaginary));
o     }
o 
o     public Complex log() {
o         if (isNaN) {
o             return NaN;
o         }
o 
o         return createComplex(FastMath.log(abs()),
o             FastMath.atan2(imaginary, real));
o     }
o 
o     public Complex pow(Complex x)
o         throws NullArgumentException {
o         MathUtils.checkNotNull(x);
o         return this.log().multiply(x).exp();
o     }
o 
o     public Complex sin() {
o         if (isNaN) {
o             return NaN;
o         }
o 
o         return createComplex(FastMath.sin(real) * MathUtils.cosh(imaginary),
o             FastMath.cos(real) * MathUtils.sinh(imaginary));
o     }
o 
o     public Complex sinh() {
o         if (isNaN) {
o             return NaN;
o         }
o 
o         return createComplex(MathUtils.sinh(real) * FastMath.cos(imaginary),
o             MathUtils.cosh(real) * FastMath.sin(imaginary));
o     }
o 
o     public Complex sqrt() {
o         if (isNaN) {
o             return NaN;
o         }
o 
o         if (real == 0.0 && imaginary == 0.0) {
o             return createComplex(0.0, 0.0);
o         }
o 
o         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
o         if (real >= 0.0) {
o             return createComplex(t, imaginary / (2.0 * t));
o         } else {
o             return createComplex(FastMath.abs(imaginary) / (2.0 * t),
o                 MathUtils.indicator(imaginary) * t);
o         }
o     }
o 
o     public Complex sqrt1z() {
o         return createComplex(1.0, 0.0).subtract(this.multiply(this)).sqrt();
o     }
o 
o     public Complex tan() {
o         if (isNaN) {
o             return NaN;
o         }
o 
o         double real2 = 2.0 * real;
o         double imaginary2 = 2.0 * imaginary;
o         double d = FastMath.cos(real2) + MathUtils.cosh(imaginary2);
o 
o         return createComplex(FastMath.sin(real2) / d, MathUtils.sinh(imaginary2) / d);
o     }
o 
o     public Complex tanh() {
o         if (isNaN) {
o             return NaN;
o         }
o 
o         double real2 = 2.0 * real;
o         double imaginary2 = 2.0 * imaginary;
o         double d = MathUtils.cosh(real2) + FastMath.cos(imaginary2);
o 
o         return createComplex(MathUtils.sinh(real2) / d, FastMath.sin(imaginary2) / d);
o     }
o 
o     public double getArgument() {
o         return FastMath.atan2(getImaginary(), getReal());
o     }
o 
o     public List<Complex> nthRoot(int n) throws IllegalArgumentException {
o 
o         if (n <= 0) {
o             throw MathRuntimeException.createIllegalArgumentException(
o                     LocalizedFormats.CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N,
o                     n);
o         }
o 
o         List<Complex> result = new ArrayList<Complex>();
o 
o         if (isNaN) {
o             result.add(NaN);
o             return result;
o         }
o 
o         if (isInfinite()) {
o             result.add(INF);
o             return result;
o         }
o 
o         final double nthRootOfAbs = FastMath.pow(abs(), 1.0 / n);
o 
o         final double nthPhi = getArgument()/n;
o         final double slice = 2 * FastMath.PI / n;
o         double innerPart = nthPhi;
o         for (int k = 0; k < n ; k++) {
o             
o             final double realPart      = nthRootOfAbs *  FastMath.cos(innerPart);
o             final double imaginaryPart = nthRootOfAbs *  FastMath.sin(innerPart);
o             result.add(createComplex(realPart, imaginaryPart));
o             innerPart += slice;
o         }
o 
o         return result;
o     }
o 
o     protected Complex createComplex(double realPart, double imaginaryPart) {
o         return new Complex(realPart, imaginaryPart);
o     }
o 
o     protected final Object readResolve() {
o         return createComplex(real, imaginary);
o     }
o 
o     public ComplexField getField() {
o         return ComplexField.getInstance();
o     }
o 
o     @Override
o     public String toString() {
o         return "(" + real + ", " + imaginary + ")";
o     }
o }

# RESPONSE ####################################

Condition: The change was necessary when performing addition of Complex numbers.
Consequence: The potential impact of this change is that when adding Complex numbers, if either of the numbers is NaN (not a number), the result will also be NaN.
Position: The change was implemented in the `add` method of the `Complex` class.
Cause: The motivation for this change is to handle the case where at least one of the Complex numbers being added is NaN. The previous implementation did not handle this case and would return incorrect results.
Change: The code was modified to check if either of the Complex numbers is NaN before performing the addition. If either of the numbers is NaN, the method returns NaN instead of performing the addition.